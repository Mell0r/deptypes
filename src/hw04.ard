\import Data.Bool
\import Data.List (List, length, nil, ::)
\import Function.Meta
\import lect02 (Empty, T, absurd)
\import lect04 \using (nil \as Vec_nil)
\open Nat

-- 1. Напишите функцию lookup, которая принимает List A и натуральное число и возвращает элемент по заданому индексу
--    В общем случае эту функцию определить невозможно, т.к. индекс может быть больше, чем число элементов в списке
--    Поэтому эта функция должна дополнительно еще принимать доказательство того,
--    что индекс находится в допустимых границах, в виде T (n < length xs)

\func \infix 4 < (x y : Nat) : Bool
  | 0, 0 => false
  | 0, suc y => true
  | suc x, 0 => false
  | suc x, suc y => x < y

\func lookup
  {A : \Type}
  (xs : List A)
  (ind : Nat)
  (p : T (ind < length xs))
  : A
\elim xs, ind
  | nil, ind => absurd $ noneLessThanZero p
  | x :: xs, 0 => x
  | x :: xs, suc ind => lookup xs ind p
  \where {
      \func noneLessThanZero {ind : Nat} (p : T (ind < 0)) : Empty \elim ind
        | 0 => p
        | suc ind => p
    }

-- 2. Реализуйте аналоги функции replicate для vec и Vec
--    (эта функция создает список заданной длины, состоящий из повторений данного элемента)
\func replicate-Vec {A : \Type} (elem : A) (n : Nat) : Vec A n \elim n
  | 0 => Vec_nil
  | suc n => cons elem $ replicate-Vec elem n

\func replicate-vec {A : \Type} (elem : A) (n : Nat) : vec A n \elim n
  | 0 => ()
  | suc n => (elem, replicate-vec elem n)

-- 3. Реализуйте аналоги функции map для vec и Vec
\func map-Vec {A B : \Type} {n : Nat} (xs : Vec A n) (f : A -> B) : Vec B n \elim n, xs
  | 0, Vec_nil => Vec_nil
  | suc n, cons x xs => cons (f x) $ map-Vec xs f

\func map-vec {A B : \Type} {n : Nat} (xs : vec A n) (f : A -> B) : vec B n \elim n, xs
  | 0, () => ()
  | suc n, (x, xs) => (f x, map-vec xs f)

-- 4. Реализуйте аналоги функции zipWith для vec и Vec
--    Функция должна принимать вектора одинаковой длины
\func zipWith-Vec
  {A B : \Type}
  {n : Nat}
  (xs : Vec A n)
  (ys : Vec B n)
  : Vec (\Sigma A B) n
\elim n, xs, ys
  | 0, Vec_nil, Vec_nil => Vec_nil
  | suc n, cons x xs, cons y ys => cons (x, y) $ zipWith-Vec xs ys

\func zipWith-vec
  {A B : \Type}
  {n : Nat}
  (xs : vec A n)
  (ys : vec B n)
  : vec (\Sigma A B) n
\elim n, xs, ys
  | 0, (), () => ()
  | suc n, (x, xs), (y, ys) => ((x, y), zipWith-vec xs ys)


-- 5. Определите тип CTree A n полных бинарных деревьев высоты ровно n,
--    которые хранят элементы только во внутренних узлах, но не в листьях
--    Высота листа равна 0

\data CTree (A : \Type) (n : Nat) \elim n
  | 0 => leafC
  | suc n => nodeC A (CTree A n) (CTree A n)

-- 6. Определите тип Tree A n бинарных деревьев высоты не больше n,
--    которые хранят элементы только во внутренних узлах, но не в листьях
--    Высота листа равна 0

\data Tree (A : \Type) (n : Nat) \elim n
  | 0 => leaf
  | suc n => {
    | hangingLeaf
    | node A (Tree A n) (Tree A n)
  }

-- Определите функцию, возвращающую высоту дерева

\func max {n : Nat} (a b : Fin (suc n)) : Fin (suc n) \elim n, a, b
  | _, fzero, b => b
  | _, a, fzero => a
  | suc n, fsuc a, fsuc b => fsuc $ max a b
  | 0, _, _ => fzero

\func height {A : \Type} {n : Nat} (t : Tree A n) : Fin (suc n) \elim n, t
  | 0, leaf => fzero
  | suc n, hangingLeaf => fzero
  | suc n, node A lNode rNode => fsuc $ max (height lNode) (height rNode)

-- Optional task
-- 7. Функции Fin n -> A соответствуют спискам элементов A длины n
--    Функция, преобразующая Vec A n в Fin n -> A, была реализована на лекции
--    Реализуйте обратную функцию

\func coin {A : \Type} {n : Nat} (f : Fin n -> A) : Vec A n => {?}

-- Optional task
-- 8. Определите тип матриц и ряд функций над ними

\func Mat (A : \Type) (n m : Nat) : \Type => {?}

-- Диагональная матрица с элементами e на диагонали и z на остальных позициях

\func diag {A : \Type} (z e : A) (n : Nat) : Mat A n n => {?}

-- Транспонирование матриц

\func transpose {A : \Type} {n m : Nat} (M : Mat A n m) : Mat A m n => {?}

-- Сложение матриц

\func matAdd {A : \Type} (add : A -> A -> A) (n m : Nat) (M N : Mat A n m) : Mat A n m => {?}

-- Умножение матриц
-- z ─ нейтральный элемент по сложению
\func matMul {A : \Type} (z : A) (add mul : A -> A -> A) (n m k : Nat) (M : Mat A n m) (N : Mat A m k) : Mat A n k => {?}

-- 9. Определите факториал через Nat-rec
\func fact (n : Nat) : Nat => Nat-rec Nat 1 (\lam x prev => suc x * prev) n

\func factTest : fact 4 = 24 => idp

-- 10. Докажите ассоциативность сложения для натуральных чисел через Nat-elim
\func assoc++ (a b c : Nat) : (a + b) + c = a + (b + c) => Nat-elim
    (\lam a => (a + b) + c = a + (b + c))
    idp
    (\lam n p => pmap suc p)
    a

-- 11. Определите рекурсор и элиминатор для D

\data D
  | con1 Nat
  | con2 D D
  | con3 (Nat -> D)

\func D-elim  (P : D -> \Type)
              (z : P (con1 zero))
              (s1 : \Pi (n : Nat) -> P (con1 n) -> P (con1 $ suc n))
              (s2 : \Pi (d1 d2 : D) -> P d1 -> P d2 -> P (con2 d1 d2))
              (s3 : \Pi (h : Nat -> D) -> (\Pi (n : Nat) -> P $ h n) -> P (con3 h))
              (x : D) : P x
\elim x
  | con1 zero => z
  | con1 (suc n) => s1 n $ D-elim P z s1 s2 s3 (con1 n)
  | con2 d1 d2 => s2 d1 d2 (D-elim P z s1 s2 s3 d1) (D-elim P z s1 s2 s3 d2)
  | con3 g => s3 g (\lam (n : Nat) => D-elim P z s1 s2 s3 $ g n)

\func D-rec (P : \Type)
            (z : P)
            (s1 : Nat -> P -> P)
            (s2 : D -> D -> P -> P -> P)
            (s3 : (Nat -> D) -> (Nat -> P) -> P)
            (x : D) : P =>
  D-elim (\lam _ => P) z s1 s2 s3 x
-- Для проверки, что определения D-elim и D-rec верные, вы можете попробовать определить foo через D-rec
--\func foo (d : D) : Nat
--  | con1 n => n
--  | con2 d1 d2 => foo d1 Nat.+ foo d2
--  | con3 g => foo (g (foo (g 100)))


\func foo (d : D) : Nat =>
  D-rec
      Nat
      0
      (\lam n _ => suc n)
      (\lam _ _ p1 p2 => p1 + p2)
      (\lam g f => f $ f 100)
      d

-- 12. Определите рекурсор и элиминатор для List
\func List-elim {A : \Type}
                (P : List A -> \Type)
                (e : P nil)
                (s : \Pi (x : A) (xs : List A) -> P xs -> P (x :: xs))
                (xs : List A) : P xs
\elim xs
  | nil => e
  | x :: xs => s x xs (List-elim P e s xs)

\func List-rec  {A : \Type}
                (P : \Type)
                (e : P)
                (s : A -> List A -> P -> P)
                (xs : List A) : P
  => List-elim (\lam _ => P) e s xs

-- 13. Докажите pmap при помощи паттерн матчинга с idp

\func pmap {A B : \Type} (f : A -> B) {a a' : A} (p : a = a') : f a = f a' \elim p
  | idp => idp

-- 14. Докажите pmap2 при помощи паттерн матчинга с idp

\func pmap2
  {A B C : \Type}
  (f : A -> B -> C)
  {a a' : A}
  (p : a = a')
  {b b' : B}
  (q : b = b')
  : f a b = f a' b'
\elim p, q
  | idp, idp => idp

-- Optional task
-- 15. У оператора J есть другая форма, которую мы будем называть Jalt
--     Докажите, что J и Jalt эквивалентны, то есть выразите одно через другое и наоборот

-- Выразите Jalt через J. Можно пользоваться только J, idp и всем, что через них выражается

\func Jalt {A : \Type} (B : \Pi (a a' : A) -> a = a' -> \Type)
           (b : \Pi (a : A) -> B a a idp)
           {a a' : A} (p : a = a') : B a a' p => {?}

-- Выразите J через Jalt. Можно пользоваться только Jalt, idp и всем, что через них выражается
-- Hint:
-- a. Выразите transport через Jalt
-- b. Докажите, что тип \Sigma (x : A) (a = x) одноэлементный,
--    то есть, что для любого p : \Sigma (x : A) (a = x) верно, что (x, idp) = p
-- c. Используя эти две конструкции, легко определить J

\func transport'' {A : \Type} (B : A -> \Type) {a a' : A} (p : a = a') (b : B a) : B a' => {?}

\func sigma-contr {A : \Type} {a : A} (p : \Sigma (x : A) (a = x)) : (a, idp) = {\Sigma (x : A) (a = x)} p => {?}

\func J' {A : \Type} {a : A} (B : \Pi (a' : A) -> a = a' -> \Type)
         (b : B a idp)
         {a' : A} (p : a = a') : B a' p => {?}
