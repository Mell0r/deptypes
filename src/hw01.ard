-- 1. Установите arend, следуя инструкциям на странице https://arend-lang.github.io/download
--    В IDEA можно просто импортировать данный проект.

-- 2. Определите аналоги следующих функций на языке хаскелл.
\func second (_ y _ : Nat) => y

\func apply (f : Nat -> Nat) (x : Nat) => f x

\func compose (f g : Nat -> Nat) (x : Nat) => f (g x)
\func flip (f : Nat -> Nat -> Nat) (x : Nat) (y : Nat) => f y x

\func second' => flip (second 0)

{- Haskell:
   second :: Nat -> Nat -> Nat -> Nat
   second _ y _ = y

   apply :: (Nat -> Nat) -> Nat -> Nat
   apply f x = f x

   compose :: (Nat -> Nat) -> (Nat -> Nat) -> Nat -> Nat
   compose f g x = f (g x)

   flip :: (Nat -> Nat -> Nat) -> Nat -> Nat -> Nat
   flip f x y = f y x

   second' = flip (second 0)
-}

-- 3. Расставьте приоритеты функций f1, f2, f3, f4, f5 и f6 так, чтобы функция test проходила тайпчекинг.

\import lect01 \hiding (+,*)

\func f1 (x y : Nat) => x
\func f2 : Nat => 0
\func \infix 1 f3 (f : Nat -> Nat) (z : Nat) : Int => 0
\func f4 : Nat => 0
\func \infix 2 f5 => f1
\func f6 => f4

\func test => f1 f2 f3 f4 f5 f6

-- 4. Определите функцию if, аналогичную следующей функции:

\func if (e t f : Bool) : Bool \elim e
  | true => t
  | false => f

{- Haskell:
   if :: Bool -> Bool -> Bool -> Bool
   if True t _ = t
   if False _ e = e
-}

-- 5. Определите || через if.

\func \infixr 2 || (x y : Bool) : Bool => if x true y

\func orTest1 : false || false = false => idp
\func orTest2 : false || true = true => idp
\func orTest3 : true || false = true => idp
\func orTest4 : true || true = true => idp

-- 6. Определите возведение в степень и факториал для натуральных чисел.

\open Nat \hiding (-,div) -- Здесь лежат + и *.

\func \infixr 8 ^ (x y : Nat) : Nat \elim y
  | 0 => 1
  | suc y' => x * x ^ y'

\func powTest1 : 2 ^ 3 = 8 => idp
\func powTest2 : 5 ^ 4 = 625 => idp
\func powTest3 : 3 ^ 0 = 1 => idp

\func fac (x : Nat) : Nat
  | 0 => 1
  | suc x' \as x => x * fac x'

\func facTest1 : fac 3 = 6 => idp
\func facTest2 : fac 4 = 24 => idp
\func facTest3 : fac 1 = 1 => idp

-- 7. Определите mod и gcd.

\func ifNat (con : Bool) (t f : Nat) : Nat \elim con
  | true => t
  | false => f

\func mod (x y : Nat) : Nat => modInner x y x
  \where {
    \func modInner (x y fuel : Nat) : Nat \elim fuel
      | 0 => 0
      | suc fuel' => ifNat (x < y) x (modInner (x - y) y fuel')
  }


\func modTest1 : mod 5 3 = 2 => idp
\func modTest2 : mod 20 6 = 2 => idp
\func modTest3 : mod 1 1 = 0 => idp

\func gcd (x y : Nat) => gcdInner x y ((x + y))
  \where {
    \func gcdInner (x y : Nat) (fuel : Nat) : Nat \elim fuel
    | 0 => 0
    | suc fuel' =>
      ifNat
        (y < x)
        (gcdInner y x fuel')
        (ifNat
            (not (x < 0 || 0 < x))
            y
            (gcdInner (mod y x) x fuel'))
  }

\func gcdTest1 : gcd 21 18 = 3 => idp
\func gcdTest2 : gcd 56 42 = 14 => idp